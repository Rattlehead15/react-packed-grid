{"version":3,"sources":["../../src/index.tsx","App.tsx","index.tsx"],"names":["usePackedGridLayout","useState","numBoxes","setNumBoxes","layout","setLayout","containerRef","useRef","updateLayout","useCallback","el","width","height","largestSquare","containerWidth","containerHeight","useEffect","listener","window","PackedGrid","children","className","boxClassName","renderedChildren","React","ref","style","display","flexFlow","placeContent","maxWidth","maxHeight","GridItemPlaceholder","backgroundColor","border","App","focusRef","focus","type","min","value","onChange","e","Number","parseInt","target","Array","from","length","map","_","idx","ReactDOM","render","document","getElementById"],"mappings":"2MAyBA,SAASA,I,MAKyBC,mBAAS,GAAlCC,OAAUC,O,EACWF,qBAArBG,OAAQC,OACTC,EAAeC,mBACfC,EAAeC,uBACnB,YAIE,GAHA,MAAIC,IACFJ,aAEEJ,KAAgBI,EAApB,QAA0C,CACxC,IAAMK,EAAQL,kCAAd,MACMM,EAASN,kCAAf,OACAD,GAxBmB,EAwBSM,EAxBpC,EAwB2CC,EAxB3C,EAwBQP,EAnBCQ,wBAAcC,EAAgBC,EAArC,KALF,IAA2B,EAA3B,MA2BI,CAXF,IAsBA,OATAC,qBAAU,WACRR,IACA,IAAMS,EAAW,kBAAMT,KAEvB,OADAU,oCACO,WACLA,0CAED,CAPHF,IASO,CAACZ,EAAQD,EAAhB,G,SAGcgB,K,IAAaC,aAAUC,cAAWC,iB,EACJtB,IAArCI,OAAQD,OAAaK,OAEtBe,EAAmBH,EAAzB,GAMA,OAJAJ,qBAAU,WACRb,EAAYqB,mBAAZrB,MACC,CAFHa,IAKE,yBACEK,UAAWA,EACXI,IAAKjB,EACLkB,MAAO,CACLC,QADK,OAELC,SAFK,WAGLC,aAAc,WAGf,oBAAqC,mBACpC,yBACER,UAAWC,EACXI,MACEtB,EACI,CACEuB,QADF,QAEEhB,MAFF,OAGEC,OAHF,OAIEkB,SAAa1B,EAAL,MAJV,KAKE2B,UAAc3B,EAAL,aAEX,CACEuB,QAAS,SAbiB,OCzE5C,SAASK,EAAT,GAA2E,IAA5CZ,EAA2C,EAA3CA,SAC7B,OACE,yBACEM,MAAO,CACLO,gBAAiB,aACjBN,QAAS,OACTE,aAAc,SACdlB,MAAO,OACPC,OAAQ,OACRsB,OAAQ,oBAGTd,GAKP,IA+Bee,EA/BH,WACV,IAAMC,EAAW3B,uBAAY,SAACC,GAC5BA,EAAG2B,UACF,IAHa,EAIgBpC,mBAAS,GAJzB,mBAITC,EAJS,KAICC,EAJD,KAMhB,OACE,oCACE,yBAAKkB,UAAU,YACb,uCAEE,2BACEI,IAAKW,EACLE,KAAK,SACLC,IAAI,IACJC,MAAOtC,EACPuC,SAAU,SAACC,GAAD,OAAOvC,EAAYwC,OAAOC,SAASF,EAAEG,OAAOL,MAAO,UAInE,kBAACrB,EAAD,CAAYE,UAAU,eACnB,kBACCyB,MAAMC,KAAK,CAAEC,OAAQ9C,IAAY+C,KAAI,SAACC,EAAGC,GAAJ,OACnC,kBAACnB,EAAD,YAA0BmB,EAAM,WCtC5CC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,U","file":"static/js/main.147fbe7c.chunk.js","sourcesContent":["import React, { useState, useEffect, useRef, useCallback } from 'react'\nimport { largestSquare } from 'rect-scaler'\n\ninterface Props {\n  children: (updateLayout: () => void) => React.ReactNode\n  className?: string\n  boxClassName?: string\n}\n\ntype Layout = {\n  rows: number\n  cols: number\n  width: number\n  height: number\n  area: number\n}\n\nfunction recalculateLayout(\n  containerWidth: number,\n  containerHeight: number,\n  numSquares: number\n) {\n  return largestSquare(containerWidth, containerHeight, numSquares)\n}\n\nfunction usePackedGridLayout(): [\n  Layout | undefined,\n  (numBoxes: number) => void,\n  (el?: HTMLDivElement | null) => void\n] {\n  const [numBoxes, setNumBoxes] = useState(0)\n  const [layout, setLayout] = useState<Layout>()\n  const containerRef = useRef<HTMLDivElement>()\n  const updateLayout = useCallback(\n    (el?: HTMLDivElement | null) => {\n      if (el != null) {\n        containerRef.current = el\n      }\n      if (numBoxes > 0 && containerRef.current) {\n        const width = containerRef.current.getBoundingClientRect().width\n        const height = containerRef.current.getBoundingClientRect().height\n        setLayout(recalculateLayout(width, height, numBoxes))\n      }\n    },\n    [numBoxes]\n  )\n  useEffect(() => {\n    updateLayout()\n    const listener = () => updateLayout()\n    window.addEventListener('resize', listener)\n    return () => {\n      window.removeEventListener('resize', listener)\n    }\n  }, [updateLayout])\n\n  return [layout, setNumBoxes, updateLayout]\n}\n\nexport function PackedGrid({ children, className, boxClassName }: Props) {\n  const [layout, setNumBoxes, updateLayout] = usePackedGridLayout()\n\n  const renderedChildren = children(updateLayout)\n\n  useEffect(() => {\n    setNumBoxes(React.Children.count(renderedChildren))\n  }, [renderedChildren])\n\n  return (\n    <div\n      className={className}\n      ref={updateLayout}\n      style={{\n        display: 'flex',\n        flexFlow: 'row wrap',\n        placeContent: 'center'\n      }}\n    >\n      {React.Children.map(renderedChildren, (child) => (\n        <div\n          className={boxClassName}\n          style={\n            layout\n              ? {\n                  display: 'block',\n                  width: '100%',\n                  height: '100%',\n                  maxWidth: `${layout.width}px`,\n                  maxHeight: `${layout.height}px`\n                }\n              : {\n                  display: 'none'\n                }\n          }\n        >\n          {child}\n        </div>\n      ))}\n    </div>\n  )\n}\n","import React, { useState, useCallback } from 'react'\n\nimport { PackedGrid } from 'react-packed-grid'\n\nfunction GridItemPlaceholder({ children }: { children: React.ReactNode }) {\n  return (\n    <div\n      style={{\n        backgroundColor: 'whitesmoke',\n        display: 'grid',\n        placeContent: 'center',\n        width: '100%',\n        height: '100%',\n        border: '2px solid black'\n      }}\n    >\n      {children}\n    </div>\n  )\n}\n\nconst App = () => {\n  const focusRef = useCallback((el) => {\n    el.focus()\n  }, [])\n  const [numBoxes, setNumBoxes] = useState(1)\n\n  return (\n    <>\n      <div className='controls'>\n        <label>\n          Boxes\n          <input\n            ref={focusRef}\n            type='number'\n            min='1'\n            value={numBoxes}\n            onChange={(e) => setNumBoxes(Number.parseInt(e.target.value, 10))}\n          />\n        </label>\n      </div>\n      <PackedGrid className='fullscreen'>\n        {() =>\n          Array.from({ length: numBoxes }).map((_, idx) => (\n            <GridItemPlaceholder>Box {idx + 1}</GridItemPlaceholder>\n          ))\n        }\n      </PackedGrid>\n    </>\n  )\n}\n\nexport default App\n","import './index.css'\n\nimport React from 'react'\nimport ReactDOM from 'react-dom'\nimport App from './App'\n\nReactDOM.render(<App />, document.getElementById('root'))\n"],"sourceRoot":""}